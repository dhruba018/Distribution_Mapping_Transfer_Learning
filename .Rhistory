X1n.mapped <- lapply(1:m, function(j){
## Calculate CDFs...
X1g.cdf <- get.dist(X1n[, j], N = 1e4)
X2g.cdf <- get.dist(X2n[, j], N = 1e4)
## Get mapping function...
kn <- knots(X2g.cdf);     fn <- X2g.cdf(kn)
map <- approxfun(x = fn, y = kn, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
## Mapped values...
X1g.mapped <- map(X1g.cdf(X1n[, j]))
})
X1n.mapped <- as.data.frame(X1n.mapped, col.names = colnames(X1n), row.names = rownames(X1n))
## Build Random Forest & predict response...
RF <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.mapped <- predict(RF, X1n);    Y1.pred.mapped[Y1.pred.mapped < 0] <- 0;    Y1.pred.mapped[Y1.pred.mapped > 1] <- 1
## Histogram matching for response...
Y1.cdf <- get.dist(Y1, N = 1e4)
Y2.cdf <- get.dist(Y2, N = 1e4)
kn.y <- knots(Y1.cdf);    fn.y <- Y1.cdf(kn.y)
map.y <- approxfun(x = fn.y, y = kn.y, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
Y1.pred <- map.y(Y2.cdf(Y1.pred.mapped))
NRMSE <- calc.err(Y1, Y1.pred, measure = "NRMSE")
NMAE <- calc.err(Y1, Y1.pred, measure = "NMAE")
printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
# rm(list = ls())
setwd("C:/Users/SRDhruba/Dropbox (Personal)/ResearchWork/Rtest/")
library(randomForest)
#### Functions...
printf <- function(...) {
if ((nargs() > 1) & (grepl(list(...)[1], pattern = "%")))
cat(sprintf(...))
else
cat(...)
}
hist.match <- function(src, ref, n.samp = 1e6){
## Estimate distributions...
ss <- sample(src, size = n.samp, replace = TRUE)
rr <- sample(ref, size = n.samp, replace = TRUE)
ss.cdf <- ecdf(ss);     rr.cdf <- ecdf(rr)
## Calculate mapping...
kn <- knots(rr.cdf);    kn.lims <- range(rr)
fn <- rr.cdf(kn)
rr.cdf.inv <- approxfun(x = fn, y = kn, yleft = kn.lims[1], yright = kn.lims[2], ties = "ordered")
## Return matched samples...
src.matched <- rr.cdf.inv(ss.cdf(src))
return(src.matched)
}
dapply <- function(df, ...) as.data.frame(apply(df, ...))
norm01 <- function(x) (x - min(x)) / diff(range(x))
#### Read tumor-cell line data...
Xdata1 <- read.table("Data/BRCA_gene_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata2 <- read.table("Data/BRCA_gene_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata3 <- read.table("Data/BRCA_gene_expression_GDSC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata1 <- read.table("Data/BRCA_biomarker_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata2 <- read.table("Data/BRCA_biomarker_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata3 <- read.table("Data/BRCA_biomarker_expression_GDSC_26_Oct_2020.txt", sep = "\t", header = TRUE)
rank1 <- read.table("Data/BRCA_biomarker_ranks_METABRIC_27_Oct_2020.txt", sep = "\t", header = TRUE)
rank2 <- read.table("Data/BRCA_biomarker_ranks_CCLE_27_Oct_2020.txt", sep = "\t", header = TRUE)
rank3 <- read.table("Data/BRCA_biomarker_ranks_GDSC_27_Oct_2020.txt", sep = "\t", header = TRUE)
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       printf("Biomarkers = ", biomarkers, "\n")
bmChosen <- "ATM"
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
## Get common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)\n", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
##
get.dist <- function(x, N = 1e6){
xx <- sample(x, size = N, replace = TRUE)
dist.xx <- ecdf(xx)
}
calc.err <- function(y, y.pred, measure = "MSE"){
measure <- toupper(measure)
if (grepl(pattern = "MSE", measure)){
err <- mean((y - y.pred)^2)
if (measure == "RMSE"){
err <- sqrt(err)
} else if (measure == "NRMSE"){
err <- sqrt(err / mean((y - mean(y))^2))
}
} else if (grepl(pattern = "MAE", measure)){
err <- mean(abs(y - y.pred))
if (measure == "NMAE"){
err <- err / mean(abs(y - mean(y)))
}
}
err
}
## Histogram matching for predictors...
X1n <- dapply(X1, MARGIN = 2, norm01);          X2n <- dapply(X2, MARGIN = 2, norm01)
X1n.mapped <- lapply(1:m, function(j){
## Calculate CDFs...
X1g.cdf <- get.dist(X1n[, j], N = 1e4)
X2g.cdf <- get.dist(X2n[, j], N = 1e4)
## Get mapping function...
kn <- knots(X2g.cdf);     fn <- X2g.cdf(kn)
map <- approxfun(x = fn, y = kn, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
## Mapped values...
X1g.mapped <- map(X1g.cdf(X1n[, j]))
})
X1n.mapped <- as.data.frame(X1n.mapped, col.names = colnames(X1n), row.names = rownames(X1n))
## Build Random Forest & predict response...
RF <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.mapped <- predict(RF, X1n);    Y1.pred.mapped[Y1.pred.mapped < 0] <- 0;    Y1.pred.mapped[Y1.pred.mapped > 1] <- 1
## Histogram matching for response...
Y1.cdf <- get.dist(Y1, N = 1e4)
Y2.cdf <- get.dist(Y2, N = 1e4)
kn.y <- knots(Y1.cdf);    fn.y <- Y1.cdf(kn.y)
map.y <- approxfun(x = fn.y, y = kn.y, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
Y1.pred <- map.y(Y2.cdf(Y1.pred.mapped))
NRMSE <- calc.err(Y1, Y1.pred, measure = "NRMSE")
NMAE <- calc.err(Y1, Y1.pred, measure = "NMAE")
printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
data.frame("NRMSE" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")),
"NMAE" = c(calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE")),
"SCC" = c(cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")))
as.data.frame("NRMSE" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")),
"NMAE" = c(calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE")),
"SCC" = c(cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")))
## Baseline model...
RF.base <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, X1n)
as.data.frame(c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE"),
calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"), col.names = c("DMTL", "BL"))
as.data.frame(c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE"),
calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")))
data.frame(c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE"),
calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")))
data.frame(c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE"),
calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")), ncol = 3)
data.frame("a" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")))
data.frame("NRMSE" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")),calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")), ncol = 3)
data.frame("NRMSE" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")),
"NMAE" = c(calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE")),
"SCC" = c(cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")))
data.frame("NRMSE" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")),
"NMAE" = c(calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE")),
"SCC" = c(cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("DMTL", "BL")).T
data.frame("NRMSE" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NRMSE")),
"NMAE" = c(calc.err(Y1, Y1.pred, measure = "NMAE"), calc.err(Y1, Y1.pred.base, measure = "NMAE")),
"SCC" = c(cor(Y1, Y1.pred, method = "spearman"), cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("DMTL", "BL"))
Y1
Y1.T
cor(Y1, Y1.pred, method = "spearman")
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n", results)
print("Results = \n", results)
printf("Results = \n");   printf(results)
printf("Results = \n");   print(results)
class("ABC")
#### Functions...
printf <- function(...) {
if ((nargs() > 1) & (grepl(list(...)[1], pattern = "%")))
cat(sprintf(...))
else if (class(...) == "character")
cat(...)
else
print(...)
}
printf("Results = \n");   printf(results)
printf("Results = \n", results)
# rm(list = ls())
setwd("C:/Users/SRDhruba/Dropbox (Personal)/ResearchWork/Rtest/")
library(randomForest)
#### Functions...
printf <- function(...) {
if ((nargs() > 1) & (grepl(list(...)[1], pattern = "%")))
cat(sprintf(...))
else if (class(...) == "character")
cat(...)
else
print(...)
}
hist.match <- function(src, ref, n.samp = 1e6){
## Estimate distributions...
ss <- sample(src, size = n.samp, replace = TRUE)
rr <- sample(ref, size = n.samp, replace = TRUE)
ss.cdf <- ecdf(ss);     rr.cdf <- ecdf(rr)
## Calculate mapping...
kn <- knots(rr.cdf);    kn.lims <- range(rr)
fn <- rr.cdf(kn)
rr.cdf.inv <- approxfun(x = fn, y = kn, yleft = kn.lims[1], yright = kn.lims[2], ties = "ordered")
## Return matched samples...
src.matched <- rr.cdf.inv(ss.cdf(src))
return(src.matched)
}
dapply <- function(df, ...) as.data.frame(apply(df, ...))
norm01 <- function(x) (x - min(x)) / diff(range(x))
#### Read tumor-cell line data...
Xdata1 <- read.table("Data/BRCA_gene_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata2 <- read.table("Data/BRCA_gene_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata3 <- read.table("Data/BRCA_gene_expression_GDSC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata1 <- read.table("Data/BRCA_biomarker_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata2 <- read.table("Data/BRCA_biomarker_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata3 <- read.table("Data/BRCA_biomarker_expression_GDSC_26_Oct_2020.txt", sep = "\t", header = TRUE)
rank1 <- read.table("Data/BRCA_biomarker_ranks_METABRIC_27_Oct_2020.txt", sep = "\t", header = TRUE)
rank2 <- read.table("Data/BRCA_biomarker_ranks_CCLE_27_Oct_2020.txt", sep = "\t", header = TRUE)
rank3 <- read.table("Data/BRCA_biomarker_ranks_GDSC_27_Oct_2020.txt", sep = "\t", header = TRUE)
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       printf("Biomarkers = ", biomarkers, "\n")
bmChosen <- "ATM"
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
## Get common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)\n", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
##
get.dist <- function(x, N = 1e6){
xx <- sample(x, size = N, replace = TRUE)
dist.xx <- ecdf(xx)
}
calc.err <- function(y, y.pred, measure = "MSE"){
measure <- toupper(measure)
if (grepl(pattern = "MSE", measure)){
err <- mean((y - y.pred)^2)
if (measure == "RMSE"){
err <- sqrt(err)
} else if (measure == "NRMSE"){
err <- sqrt(err / mean((y - mean(y))^2))
}
} else if (grepl(pattern = "MAE", measure)){
err <- mean(abs(y - y.pred))
if (measure == "NMAE"){
err <- err / mean(abs(y - mean(y)))
}
}
err
}
## Histogram matching for predictors...
X1n <- dapply(X1, MARGIN = 2, norm01);          X2n <- dapply(X2, MARGIN = 2, norm01)
X1n.mapped <- lapply(1:m, function(j){
## Calculate CDFs...
X1g.cdf <- get.dist(X1n[, j], N = 1e4)
X2g.cdf <- get.dist(X2n[, j], N = 1e4)
## Get mapping function...
kn <- knots(X2g.cdf);     fn <- X2g.cdf(kn)
map <- approxfun(x = fn, y = kn, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
## Mapped values...
X1g.mapped <- map(X1g.cdf(X1n[, j]))
})
X1n.mapped <- as.data.frame(X1n.mapped, col.names = colnames(X1n), row.names = rownames(X1n))
## Build Random Forest & predict response...
RF <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.mapped <- predict(RF, X1n);    Y1.pred.mapped[Y1.pred.mapped < 0] <- 0;    Y1.pred.mapped[Y1.pred.mapped > 1] <- 1
## Histogram matching for response...
Y1.cdf <- get.dist(Y1, N = 1e4)
Y2.cdf <- get.dist(Y2, N = 1e4)
kn.y <- knots(Y1.cdf);    fn.y <- Y1.cdf(kn.y)
map.y <- approxfun(x = fn.y, y = kn.y, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
Y1.pred <- map.y(Y2.cdf(Y1.pred.mapped))
## Baseline model...
RF.base <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, X1n)
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   printf(results)
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       printf("Biomarkers = ", biomarkers, "\n")
bmChosen <- "BRCA1"
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
## Get common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)\n", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
##
get.dist <- function(x, N = 1e6){
xx <- sample(x, size = N, replace = TRUE)
dist.xx <- ecdf(xx)
}
calc.err <- function(y, y.pred, measure = "MSE"){
measure <- toupper(measure)
if (grepl(pattern = "MSE", measure)){
err <- mean((y - y.pred)^2)
if (measure == "RMSE"){
err <- sqrt(err)
} else if (measure == "NRMSE"){
err <- sqrt(err / mean((y - mean(y))^2))
}
} else if (grepl(pattern = "MAE", measure)){
err <- mean(abs(y - y.pred))
if (measure == "NMAE"){
err <- err / mean(abs(y - mean(y)))
}
}
err
}
## Histogram matching for predictors...
X1n <- dapply(X1, MARGIN = 2, norm01);          X2n <- dapply(X2, MARGIN = 2, norm01)
X1n.mapped <- lapply(1:m, function(j){
## Calculate CDFs...
X1g.cdf <- get.dist(X1n[, j], N = 1e6)
X2g.cdf <- get.dist(X2n[, j], N = 1e6)
## Get mapping function...
kn <- knots(X2g.cdf);     fn <- X2g.cdf(kn)
map <- approxfun(x = fn, y = kn, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
## Mapped values...
X1g.mapped <- map(X1g.cdf(X1n[, j]))
})
X1n.mapped <- as.data.frame(X1n.mapped, col.names = colnames(X1n), row.names = rownames(X1n))
## Build Random Forest & predict response...
RF <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.mapped <- predict(RF, X1n);    Y1.pred.mapped[Y1.pred.mapped < 0] <- 0;    Y1.pred.mapped[Y1.pred.mapped > 1] <- 1
## Histogram matching for response...
Y1.cdf <- get.dist(Y1, N = 1e6)
Y2.cdf <- get.dist(Y2, N = 1e6)
kn.y <- knots(Y1.cdf);    fn.y <- Y1.cdf(kn.y)
map.y <- approxfun(x = fn.y, y = kn.y, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
Y1.pred <- map.y(Y2.cdf(Y1.pred.mapped))
## Baseline model...
RF.base <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, X1n)
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   printf(results)
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       printf("Biomarkers = ", biomarkers, "\n")
bmChosen <- "BRCA1"
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
## Get common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)\n", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
##
get.dist <- function(x, N = 1e6){
xx <- sample(x, size = N, replace = TRUE)
dist.xx <- ecdf(xx)
}
calc.err <- function(y, y.pred, measure = "MSE"){
measure <- toupper(measure)
if (grepl(pattern = "MSE", measure)){
err <- mean((y - y.pred)^2)
if (measure == "RMSE"){
err <- sqrt(err)
} else if (measure == "NRMSE"){
err <- sqrt(err / mean((y - mean(y))^2))
}
} else if (grepl(pattern = "MAE", measure)){
err <- mean(abs(y - y.pred))
if (measure == "NMAE"){
err <- err / mean(abs(y - mean(y)))
}
}
err
}
## Histogram matching for predictors...
X1n <- dapply(X1, MARGIN = 2, norm01);          X2n <- dapply(X2, MARGIN = 2, norm01)
X1n.mapped <- lapply(1:m, function(j){
## Calculate CDFs...
X1g.cdf <- get.dist(X1n[, j], N = 1e6)
X2g.cdf <- get.dist(X2n[, j], N = 1e6)
## Get mapping function...
kn <- knots(X2g.cdf);     fn <- X2g.cdf(kn)
map <- approxfun(x = fn, y = kn, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
## Mapped values...
X1g.mapped <- map(X1g.cdf(X1n[, j]))
})
X1n.mapped <- as.data.frame(X1n.mapped, col.names = colnames(X1n), row.names = rownames(X1n))
## Build Random Forest & predict response...
RF <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.mapped <- predict(RF, X1n);    Y1.pred.mapped[Y1.pred.mapped < 0] <- 0;    Y1.pred.mapped[Y1.pred.mapped > 1] <- 1
## Histogram matching for response...
Y1.cdf <- get.dist(Y1, N = 1e6)
Y2.cdf <- get.dist(Y2, N = 1e6)
kn.y <- knots(Y1.cdf);    fn.y <- Y1.cdf(kn.y)
map.y <- approxfun(x = fn.y, y = kn.y, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
Y1.pred <- map.y(Y2.cdf(Y1.pred.mapped))
## Baseline model...
RF.base <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, X1n)
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   printf(results)
##
get.dist <- function(x, N = 1e6){
xx <- sample(x, size = N, replace = TRUE)
dist.xx <- ecdf(xx)
}
calc.err <- function(y, y.pred, measure = "MSE"){
measure <- toupper(measure)
if (grepl(pattern = "MSE", measure)){
err <- mean((y - y.pred)^2)
if (measure == "RMSE"){
err <- sqrt(err)
} else if (measure == "NRMSE"){
err <- sqrt(err / mean((y - mean(y))^2))
}
} else if (grepl(pattern = "MAE", measure)){
err <- mean(abs(y - y.pred))
if (measure == "NMAE"){
err <- err / mean(abs(y - mean(y)))
}
}
err
}
## Histogram matching for predictors...
X1n <- dapply(X1, MARGIN = 2, norm01);          X2n <- dapply(X2, MARGIN = 2, norm01)
X1n.mapped <- lapply(1:m, function(j){
## Calculate CDFs...
X1g.cdf <- get.dist(X1n[, j], N = 1e4)
X2g.cdf <- get.dist(X2n[, j], N = 1e4)
## Get mapping function...
kn <- knots(X2g.cdf);     fn <- X2g.cdf(kn)
map <- approxfun(x = fn, y = kn, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
## Mapped values...
X1g.mapped <- map(X1g.cdf(X1n[, j]))
})
X1n.mapped <- as.data.frame(X1n.mapped, col.names = colnames(X1n), row.names = rownames(X1n))
## Build Random Forest & predict response...
RF <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.mapped <- predict(RF, X1n);    Y1.pred.mapped[Y1.pred.mapped < 0] <- 0;    Y1.pred.mapped[Y1.pred.mapped > 1] <- 1
## Histogram matching for response...
Y1.cdf <- get.dist(Y1, N = 1e4)
Y2.cdf <- get.dist(Y2, N = 1e4)
kn.y <- knots(Y1.cdf);    fn.y <- Y1.cdf(kn.y)
map.y <- approxfun(x = fn.y, y = kn.y, method = "linear", yleft = 0, yright = 1, f = 0.5, ties = mean)
Y1.pred <- map.y(Y2.cdf(Y1.pred.mapped))
## Baseline model...
RF.base <- randomForest(x = X2n, y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, X1n)
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   printf(results)
# rm(list = ls())
setwd("C:/Users/SRDhruba/Dropbox (Personal)/ResearchWork/Rtest/")
library(randomForest)
#### Functions...
printf <- function(...) {
if ((nargs() > 1) & (grepl(list(...)[1], pattern = "%")))
cat(sprintf(...))
else if (class(...) == "character")
cat(...)
else
print(...)
}
hist.match <- function(src, ref, n.samp = 1e6){
## Estimate distributions...
ss <- sample(src, size = n.samp, replace = TRUE)
rr <- sample(ref, size = n.samp, replace = TRUE)
ss.cdf <- ecdf(ss);     rr.cdf <- ecdf(rr)
## Calculate mapping...
kn <- knots(rr.cdf);    kn.lims <- range(rr)
fn <- rr.cdf(kn)
rr.cdf.inv <- approxfun(x = fn, y = kn, yleft = kn.lims[1], yright = kn.lims[2], ties = "ordered")
## Return matched samples...
src.matched <- rr.cdf.inv(ss.cdf(src))
return(src.matched)
}
dapply <- function(df, ...) as.data.frame(apply(df, ...))
norm01 <- function(x) (x - min(x)) / diff(range(x))
#### Read tumor-cell line data...
Xdata1 <- read.table("Data/BRCA_gene_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata2 <- read.table("Data/BRCA_gene_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
