2+3
2+3
3-5
install.packages("tidyverse")
library(ggplot2)
install.packages("biomartr")
install.packages("BiocManager")
install.packages(Rtools)
install.packages("Rtools")
BiocManager::install("biomaRt")
BiocManager::install("limma")
BiocManager::install("edgeR")
BiocManager::install("DESeq2")
BiocManager::install("phytools")
BiocManager::install("tximport")
BiocManager::install("ggpubr")
BiocManager::install("cowplot")
install.packages("RStoolbox")
## Set-up system path...
info <- Sys.getenv(c("USERNAME", "HOMEPATH"))
if (info["USERNAME"] == "SRDhruba"){
info["DIRPATH"] <- sprintf("%s\\Dropbox%s\\ResearchWork\\Rtest\\", info["HOMEPATH"], " (Personal)")
} else {
info["DIRPATH"] <- sprintf("%s\\Dropbox%s\\ResearchWork\\Rtest\\", info["HOMEPATH"], "")
}
setwd(info["DIRPATH"]);       cat("Current system path = ", getwd())
## Packages...
library(ggplot2)
library(ggpubr)
library(randomForest)
#### Functions...
printf <- function(..., end = "\n"){
if ((nargs() > 1) & (grepl(list(... )[1], pattern = "%")))
cat(sprintf(...), end)
else
cat(..., end)
}
dapply <- function(df, ...) as.data.frame(apply(df, ...))
norm01 <- function(x) (x - min(x)) / diff(range(x))
calc.err <- function(y, y.pred, measure = "MSE"){
measure <- toupper(measure)
if (grepl(pattern = "MSE", measure)){
err <- mean((y - y.pred)^2)
if (measure == "RMSE"){
err <- sqrt(err)
} else if (measure == "NRMSE"){
err <- sqrt(err / mean((y - mean(y))^2))
}
} else if (grepl(pattern = "MAE", measure)){
err <- mean(abs(y - y.pred))
if (measure == "NMAE"){
err <- err / mean(abs(y - mean(y)))
}
}
err
}
#### Read tumor-cell line data...
Xdata1 <- read.table("Data/BRCA_gene_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata2 <- read.table("Data/BRCA_gene_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
Xdata3 <- read.table("Data/BRCA_gene_expression_GDSC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata1 <- read.table("Data/BRCA_biomarker_expression_METABRIC_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata2 <- read.table("Data/BRCA_biomarker_expression_CCLE_26_Oct_2020.txt", sep = "\t", header = TRUE)
Ydata3 <- read.table("Data/BRCA_biomarker_expression_GDSC_26_Oct_2020.txt", sep = "\t", header = TRUE)
rank1 <- read.table("Data/BRCA_biomarker_ranks_METABRIC_27_Oct_2020.txt", sep = "\t", header = TRUE)
rank2 <- read.table("Data/BRCA_biomarker_ranks_CCLE_27_Oct_2020.txt", sep = "\t", header = TRUE)
rank3 <- read.table("Data/BRCA_biomarker_ranks_GDSC_27_Oct_2020.txt", sep = "\t", header = TRUE)
run <- function(k) {
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       bmChosen <- biomarkers[k]
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
printf("Chosen biomarker = %s", bmChosen)
## Get data for common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
printf("Size of X1 = ", dim(X1), "\nSize of X2 = ", dim(X2))
## DMTL model...
source("dist.match.trans.learn.R")
Y1.pred <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = NULL)
## Baseline model...
# set.seed(0)
RF.base <- randomForest(x = dapply(X2, MARGIN = 2, norm01), y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, dapply(X1, MARGIN = 2, norm01))
Y1.pred.base[Y1.pred.base < 0] <- 0;    Y1.pred.base[Y1.pred.base > 1] <- 1
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   print(results)
}
run(6)
# run <- function(k) {
k = 4
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       bmChosen <- biomarkers[k]
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
printf("Chosen biomarker = %s", bmChosen)
## Get data for common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
printf("Size of X1 = ", dim(X1), "\nSize of X2 = ", dim(X2))
## DMTL model...
source("dist.match.trans.learn.R")
aa <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = 0, pred.opt = TRUE)
aa
str(aa)
aa <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = 0, pred.opt = TRUE)
str(aa)
View(aa)
aa1 <- aa$mapped
names(aa1) <- names(aa$unmapped)
View(aa1)
str(aa1)
## DMTL model...
source("dist.match.trans.learn.R")
aa <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = 0, pred.opt = TRUE)
View(aa)
c(aa1, aa2) <- unlist(dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = 0, pred.opt = TRUE))
aa1, aa2 <- unlist(dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = 0, pred.opt = TRUE))
## DMTL model...
source("dist.match.trans.learn.R")
prediction <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2),
seed = 0, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(0)
RF.base <- randomForest(x = dapply(X2, MARGIN = 2, norm01), y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, dapply(X1, MARGIN = 2, norm01))
Y1.pred.base[Y1.pred.base < 0] <- 0;    Y1.pred.base[Y1.pred.base > 1] <- 1
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
"DMTL_SS" = c(calc.err(Y1, Y1.pred.src, measure = "NRMSE"), calc.err(Y1, Y1.pred.src, measure = "NMAE"),
cor(Y1, Y1.pred.src, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   print(results)
bmChosen
run <- function(k) {
# k = 4
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       bmChosen <- biomarkers[k]
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
printf("Chosen biomarker = %s", bmChosen)
## Get data for common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
printf("Size of X1 = ", dim(X1), "\nSize of X2 = ", dim(X2))
## DMTL model...
source("dist.match.trans.learn.R")
prediction <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2),
seed = 0, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(0)
RF.base <- randomForest(x = dapply(X2, MARGIN = 2, norm01), y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, dapply(X1, MARGIN = 2, norm01))
Y1.pred.base[Y1.pred.base < 0] <- 0;    Y1.pred.base[Y1.pred.base > 1] <- 1
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
"DMTL_SS" = c(calc.err(Y1, Y1.pred.src, measure = "NRMSE"), calc.err(Y1, Y1.pred.src, measure = "NMAE"),
cor(Y1, Y1.pred.src, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   print(results)
}
run(6)
run(4)
## Baseline model...
set.seed(NULL)
run <- function(k) {
# k = 4
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       bmChosen <- biomarkers[k]
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
printf("Chosen biomarker = %s", bmChosen)
## Get data for common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
printf("Size of X1 = ", dim(X1), "\nSize of X2 = ", dim(X2))
## DMTL model...
source("dist.match.trans.learn.R")
prediction <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2),
seed = NULL, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(NULL)
RF.base <- randomForest(x = dapply(X2, MARGIN = 2, norm01), y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, dapply(X1, MARGIN = 2, norm01))
Y1.pred.base[Y1.pred.base < 0] <- 0;    Y1.pred.base[Y1.pred.base > 1] <- 1
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
"DMTL_SS" = c(calc.err(Y1, Y1.pred.src, measure = "NRMSE"), calc.err(Y1, Y1.pred.src, measure = "NMAE"),
cor(Y1, Y1.pred.src, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   print(results)
}
run(4)
run(4)
run(4)
run(4)
run(4)
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);
# for (k in 1:length(biomarkers)) {
for (k in 1:5) {
run(k)
}
run <- function(k) {
# k = 4
bmChosen <- biomarkers[k]
ranks <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
printf("\nChosen biomarker = %s", bmChosen)
## Get data for common top 'm' genes...
m_opt <- 150;       nGN <- 300;               gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3])
nI <- 0;            m0 <- length(gnRank);     m <- m0
while(m < m_opt){
nI <- nI + 1;     nGN <- nGN + 100
gnRank <- intersect(ranks[1:nGN, 2], ranks[1:nGN, 3]);      m <- length(gnRank)
}
gnRank <- sort(gnRank, decreasing = FALSE)
printf("#top genes chosen = %d (nGN = %d, nI = %d, m0 = %d)", m, nGN, nI, m0)
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
printf("Size of X1 = ", dim(X1), "\nSize of X2 = ", dim(X2))
## DMTL model...
source("dist.match.trans.learn.R")
prediction <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2),
seed = NULL, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(NULL)
RF.base <- randomForest(x = dapply(X2, MARGIN = 2, norm01), y = Y2, ntree = 200)
Y1.pred.base <- predict(RF.base, dapply(X1, MARGIN = 2, norm01))
Y1.pred.base[Y1.pred.base < 0] <- 0;    Y1.pred.base[Y1.pred.base > 1] <- 1
## Results df...
# printf("After prediction: NRMSE = %0.4f, NMAE = %0.4f", NRMSE, NMAE)
results <- data.frame("DMTL" = c(calc.err(Y1, Y1.pred, measure = "NRMSE"), calc.err(Y1, Y1.pred, measure = "NMAE"),
cor(Y1, Y1.pred, method = "spearman")),
"DMTL_SS" = c(calc.err(Y1, Y1.pred.src, measure = "NRMSE"), calc.err(Y1, Y1.pred.src, measure = "NMAE"),
cor(Y1, Y1.pred.src, method = "spearman")),
'BL' = c(calc.err(Y1, Y1.pred.base, measure = "NRMSE"), calc.err(Y1, Y1.pred.base, measure = "NMAE"),
cor(Y1, Y1.pred.base, method = "spearman")),
row.names = c("NRMSE", "NMAE", "SCC"))
printf("Results = \n");   print(results)
}
for (k in 1:length(biomarkers)) {
# for (k in 1:5) {
run(k)
}
for (k in 3) {}
for (k in 3) {
run(k)
}
Ydata1[1:5, ]
Ydata1[1:10, 1:5]
aa <- dist.match.trans.learn(target.set = list(X = X1, y = Y1), source.set = list(X = X2, y = Y2), seed = 0, pred.opt = FALSE)
View(aa)
aa
str(aa)
methods.list <- c("DMTL", "DMTL_SS", "BL")
results.all <- list("NRMSE" = data.frame(row.names = biomarkers, col.names = methods.list),
"NMAE"  = data.frame(row.names = biomarkers, col.names = methods.list),
"SCC"   = data.frame(row.names = biomarkers, col.names = methods.list),
"genes" = data.frame(row.names = biomarkers, col.names = c("num.genes")),
"Table" = data.frame(row.names = c("NRMSE", "NMAE", "SCC", "Mean"), col.names = methods.list))
data.frame(row.names = 1:5, col.names = 1:3)
as.data.frame(row.names = 1:5, col.names = 1:3)
#### Get data for a biomarker...
biomarkers <- colnames(Ydata1);       q <- length(biomarkers)
matrix(nrow = q, ncol = 4, dimnames = list(biomarkers, methods.list))
matrix(nrow = q, ncol = 3, dimnames = list(biomarkers, methods.list))
matrix(dimnames = list(biomarkers, methods.list))
as.data.frame(matrix(nrow = q, ncol = 3, dimnames = list(biomarkers, methods.list)))
aa <- data.frame(DMTL = double(), DMTL_SS = double(), SCC = double())
aa
aa <- data.frame(DMTL = double(), DMTL_SS = double(), SCC = double())
aa["ATM", ] <- c(0.1, 0.2, 0.3)
aa
data.frame(col.names = c("DMTL"))
data.frame(colnames = c("DMTL"))
data.frame(row.names = c("DMTL"))
confine.in.lims <- function(y, lims = c(0, 1)) {
y[y < lims[1]] <- lims[1];      y[y > lims[2]] <- lims[2]
}
