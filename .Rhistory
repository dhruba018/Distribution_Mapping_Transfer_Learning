source("dist.match.trans.learn.R")      ## Load function
source("dist.match.trans.learn.R")      ## Load function
# run <- function(q.run, random.seed, method.opt) {
q.run <- 1                     # drug idx
random.seed <- 4321            # 0, 654321, 4321
method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(random.seed)
RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
Y1.pred.base <- predict(RF.base, norm.data(X1))
Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
## Generate & save results...
printf("Saving results for = %s", bmChosen)
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
print(results)
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
printf("\nResults summary = ");    print(results.all$table)
results.all
## Get results for all biomarkers...
source("dist.match.trans.learn.R")      ## Load function
q.run <- 1                     # drug idx
random.seed <- 4321            # 0, 654321, 4321
method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(random.seed)
RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
Y1.pred.base <- predict(RF.base, norm.data(X1))
Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
## Generate & save results...
printf("Saving results for = %s", bmChosen)
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
print(results)
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Get results for all biomarkers...
source("dist.match.trans.learn.R")      ## Load function
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(random.seed)
RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
Y1.pred.base <- predict(RF.base, norm.data(X1))
Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
## Generate & save results...
printf("Saving results for = %s", bmChosen)
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
print(results)
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
printf("\nResults summary = ");    print(results.all$table)
results.all
}
source("dist.match.trans.learn.R")      ## Load function
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "dens")
results.all$NRMSE
results.all$NMAE
results.all$SCC
c(sum(results.all$NRMSE$DMTL >= 1), sum(results.all$NMAE$DMTL >= 1), sum(abs(results.all$SCC$DMTL) <= 0.2))
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
set.seed(random.seed)
RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
Y1.pred.base <- predict(RF.base, norm.data(X1))
Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
## Generate & save results...
printf("Saving results for = %s", bmChosen)
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
print(results)
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
printf("\nResults summary = ");    print(results.all$table)
results.all
}
source("dist.match.trans.learn.R")      ## Load function
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "dens")
c(sum(results.all$NRMSE$DMTL >= 1), sum(results.all$NMAE$DMTL >= 1), sum(abs(results.all$SCC$DMTL) <= 0.2))
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
source("RF_predict.R")
Y1.pred.base <- RF_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1),
n_tree = 200, m_try = 0.3, rand_seed = random.seed)
# set.seed(random.seed)
# RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
# Y1.pred.base <- predict(RF.base, norm.data(X1))
# Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
#
## Generate & save results...
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
## Print option...
if (length(q) == 1) {
printf("Results for %s = ", bmChosen);     print(results)
}
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
## Print options...
if (length(q) > 1) {
printf("\nResults summary = ");    print(results.all$table)
}
results.all
}
# source("dist.match.trans.learn.R")      ## Load function
source("dist_match_trans_learn.R")      ## Load function
results.all <- run(q.run = 4, random.seed = 4321, method.opt = "hist")
results.all <- run(q.run = 7, random.seed = 4321, method.opt = "hist")
results.all <- run(q.run = 1, random.seed = 4321, method.opt = "hist")
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "hist")
printf("\nResults summary = ");    print(results.all$table)
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
source("RF_predict.R")
Y1.pred.base <- RF_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1),
n_tree = 200, m_try = 0.3, rand_seed = random.seed)
# set.seed(random.seed)
# RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
# Y1.pred.base <- predict(RF.base, norm.data(X1))
# Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
#
## Generate & save results...
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
## Print option...
if (length(q.run) == 1) {
printf("\nResults for %s = ", bmChosen);     print(results)
}
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
## Print options...
if (length(q.run) > 1) {
printf("\nResults summary = ");    print(results.all$table)
}
results.all
}
# source("dist.match.trans.learn.R")      ## Load function
source("dist_match_trans_learn.R")      ## Load function
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "hist")
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
source("RF_predict.R")
Y1.pred.base <- RF_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1),
n_tree = 200, m_try = 0.33, rand_seed = random.seed)
# set.seed(random.seed)
# RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
# Y1.pred.base <- predict(RF.base, norm.data(X1))
# Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
#
## Generate & save results...
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
## Print option...
if (length(q.run) == 1) {
printf("\nResults for %s = ", bmChosen);     print(results)
}
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
## Print options...
if (length(q.run) > 1) {
printf("\nResults summary = ");    print(results.all$table)
}
results.all
}
# source("dist.match.trans.learn.R")      ## Load function
source("dist_match_trans_learn.R")      ## Load function
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "hist")
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
source("RF_predict.R")
Y1.pred.base <- RF_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1),
n_tree = 200, m_try = 0.25, rand_seed = random.seed)
# set.seed(random.seed)
# RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
# Y1.pred.base <- predict(RF.base, norm.data(X1))
# Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
#
## Generate & save results...
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
## Print option...
if (length(q.run) == 1) {
printf("\nResults for %s = ", bmChosen);     print(results)
}
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
## Print options...
if (length(q.run) > 1) {
printf("\nResults summary = ");    print(results.all$table)
}
results.all
}
# source("dist.match.trans.learn.R")      ## Load function
source("dist_match_trans_learn.R")      ## Load function
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "hist")
run <- function(q.run, random.seed, method.opt) {
# q.run <- 1                     # drug idx
# random.seed <- 4321            # 0, 654321, 4321
# method.opt <- "dens"           # hist, dens
source("RF_predict.R")
perf.mes <- c("NRMSE", "NMAE", "SCC")
results.all <- list(data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
data.frame("DMTL" = double(), "DMTL_SS" = double(), "BL" = double()),
"genes" = data.frame("num.genes" = double()))
names(results.all)[1:3] <- perf.mes
for (k in q.run) {
## Select biomarker...
bmChosen <- biomarkers[k];      #printf("\nChosen biomarker = %s", bmChosen)
ranks    <- cbind(rank1[, bmChosen], rank2[, bmChosen], rank3[, bmChosen])
gnRank   <- get.top.genes(ranks[, 2:3], m.top = 150, print.opt = FALSE);      m <- length(gnRank)
## Prepare datasets...
X1 <- Xdata1[, gnRank];               X2 <- rbind(Xdata2[, gnRank], Xdata3[, gnRank])
Y1 <- norm01(Ydata1[, bmChosen]);     Y2 <- norm01(c(Ydata2[, bmChosen], Ydata3[, bmChosen]))
## DMTL model...
prediction <- dist.match.trans.learn(target.set = list("X" = X1, "y" = Y1), source.set = list("X" = X2, "y" = Y2),
method = method.opt, seed = random.seed, pred.opt = TRUE)
Y1.pred <- prediction$mapped;     Y1.pred.src <- prediction$unmapped
## Baseline model...
Y1.pred.base <- RF_predict(x_train = norm.data(X2), y_train = Y2, x_test = norm.data(X1),
n_tree = 200, m_try = 0.4, rand_seed = random.seed)
# set.seed(random.seed)
# RF.base <- randomForest(x = norm.data(X2), y = Y2, ntree = 200, mtry = 5, replace = TRUE)
# Y1.pred.base <- predict(RF.base, norm.data(X1))
# Y1.pred.base[Y1.pred.base < 0] <- 0;      Y1.pred.base[Y1.pred.base > 1] <- 1
#
## Generate & save results...
results <- data.frame("DMTL"    = calc.perf(Y1, Y1.pred, measures = perf.mes),
"DMTL_SS" = calc.perf(Y1, Y1.pred.src, measures = perf.mes),
"BL"      = calc.perf(Y1, Y1.pred.base, measures = perf.mes), row.names = perf.mes)
## Print option...
if (length(q.run) == 1) {
printf("\nResults for %s = ", bmChosen);     print(results)
}
results.all[[perf.mes[1]]][bmChosen, ] <- results[perf.mes[1], ]
results.all[[perf.mes[2]]][bmChosen, ] <- results[perf.mes[2], ]
results.all[[perf.mes[3]]][bmChosen, ] <- results[perf.mes[3], ]
results.all$genes[bmChosen, ] <- m
}
## Calculate mean performance...
results.all[[perf.mes[1]]]["Mean", ] <- colMeans(results.all[[perf.mes[1]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[2]]]["Mean", ] <- colMeans(results.all[[perf.mes[2]]][biomarkers, ], na.rm = TRUE)
results.all[[perf.mes[3]]]["Mean", ] <- colMeans(results.all[[perf.mes[3]]][biomarkers, ], na.rm = TRUE)
results.all$genes["Mean", ]          <- mean(results.all$genes[biomarkers, ], na.rm = TRUE)
results.all[["table"]] <- rbind(results.all[[perf.mes[1]]]["Mean", ], results.all[[perf.mes[2]]]["Mean", ],
results.all[[perf.mes[3]]]["Mean", ])
rownames(results.all$table) <- perf.mes
## Print options...
if (length(q.run) > 1) {
printf("\nResults summary = ");    print(results.all$table)
}
results.all
}
# source("dist.match.trans.learn.R")      ## Load function
source("dist_match_trans_learn.R")      ## Load function
results.all <- run(q.run = 1:q, random.seed = 4321, method.opt = "hist")
View(results.all)
View(results.all$NRMSE)
c(sum(results.all$NRMSE$DMTL >= 1), sum(results.all$NMAE$DMTL >= 1), sum(abs(results.all$SCC$DMTL) <= 0.2))
results.all <- run(q.run = 1:q, random.seed = 0, method.opt = "hist")
q()
